# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum Category {
  ELECTRONICS
  FURNITURE
  HOME_APPLIANCES
  OUTDOOR
  SPORTING_GOODS
  TOYS
}

enum Condition {
  FAIR
  GOOD
  LIKE_NEW
  NEW
}

input CreateBuyOrderInput {
  productId: ID!
}

input CreateProductInput {
  categories: [Category!]!
  condition: Condition
  description: String
  rentInterval: RentInterval
  rentPrice: Float
  salePrice: Float
  title: String!
}

input CreateRentOrderInput {
  endDate: String!
  productId: ID!
  startDate: String!
}

input CreateUserDto {
  address: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginUserDto {
  email: String!
  password: String!
}

type Mutation {
  createBuyOrder(input: CreateBuyOrderInput!): OrderResponse!
  createProduct(input: CreateProductInput!): ProductResponse!
  createRentOrder(input: CreateRentOrderInput!): OrderResponse!
  createUser(createUserInput: CreateUserDto!): UserResponse!
  deleteProduct(id: String!): ProductResponse!
  loginUser(loginUserInput: LoginUserDto!): UserResponse!
  updateProduct(input: UpdateProductInput!): ProductResponse!
}

type OrderModel {
  amount: Float!
  buyer: UserModel!
  buyerId: String!
  createdAt: String!
  currency: String!
  endDate: String
  id: ID!
  product: ProductModel!
  productId: String!
  startDate: String
  status: OrderStatus!
  type: OrderType!
}

type OrderResponse {
  message: String!
  order: OrderModel!
  statusCode: Int!
}

enum OrderStatus {
  CANCELLED
  CONFIRMED
  PENDING
}

enum OrderType {
  RENT
  SALE
}

type ProductCategoryModel {
  category: Category!
}

type ProductListResponse {
  products: [ProductModel!]!
  totalCount: Int!
}

type ProductModel {
  categories: [ProductCategoryModel!]!
  condition: Condition!
  createdAt: DateTime!
  currency: String!
  description: String
  id: ID!
  ownerId: String!
  rentInterval: RentInterval
  rentPrice: Float
  salePrice: Float
  status: ProductStatus!
  title: String!
  updatedAt: DateTime!
}

type ProductResponse {
  message: String!
  product: ProductModel!
  statusCode: Int!
}

enum ProductStatus {
  ARCHIVED
  AVAILABLE
  RENTED
  SOLD
}

type Query {
  findUserByEmail(email: String!): UserModel!
  findUserById(userId: String!): UserModel!
  getAllProducts(page: Int! = 1, pageSize: Int! = 10, search: String): ProductListResponse!
  getCurrentUser: UserModel!
  getCurrentUserOrders: [OrderModel!]!
  getCurrentUserSales: [OrderModel!]!
  getProductById(id: String!): ProductModel!
  getUserProducts(page: Int! = 1, pageSize: Int! = 10, search: String): ProductListResponse!
  test: String!
}

enum RentInterval {
  DAILY
  HOURLY
  MONTHLY
  WEEKLY
  YEARLY
}

input UpdateProductInput {
  categories: [Category!]
  condition: Condition
  description: String
  id: ID!
  rentInterval: RentInterval
  rentPrice: Float
  salePrice: Float
  title: String
}

type UserModel {
  address: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phone: String!
  updatedAt: DateTime!
}

type UserResponse {
  message: String!
  statusCode: Int!
  user: UserModel!
}